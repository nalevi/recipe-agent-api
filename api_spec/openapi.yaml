openapi: "3.0.0"
info:
  title: Recipe Agent backend API service
  version: 1.0.0
paths:
  /:
    get:
      operationId: welcomePage
      summary: Home page
      responses:
        '200':
          description: |-
            Welcome message
          content:
            text/plain:
              schema:
                type: string
              example: 'Welcome to the Recipe Agent backend API!'
  /recipe:
    get:
      operationId: getRecipes
      parameters:
        - name: title
          in: query
          description: the title string
          required: false
          explode: true
          schema:
            type: string
            default: ''
            example: Gulyas soup
        - name: meal_type
          in: query
          description: the type of the meal
          required: false
          schema:
            type: string
            enum:
              - breakfast
              - lunch
              - dinner
        - name: prep_time
          in: query
          description: The amount of time needed to cook the meal (less then equals) in minutes.
          required: false
          schema:
            type: integer
            example: 75
      responses:
        '200':
          description: successful query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
    post:
      operationId: addRecipe
      description: Add a new recipe to the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        required: true
      responses:
        '200':
          description: Successful answer fo the insertion
          content:
            text/plain:
              schema:
                type: string
              example: 'Successfully added the new recipe!'
        '400':
          description: Invalid input
  /recipe/{recipe_id}:
    get:
      summary: Find recipe by the ID
      description: THe ID is coming from the database
      operationId: getRecipeById
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
            example: 7
      responses:
        '200':
          description: The query hits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '404':
          description: Not found
    put:
      summary: Update recipe
      description: Update the recipe's attributes which belongs to the ID
      operationId: updateRecipeById
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
            example: 7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        required: true
      responses:
        '200':
          description: The query hits
          content:
            text/plain:
              schema:
                type: string
              example: 'Successful modification of the recipe!'
        '400':
          description: Invalid input
        '404':
          description: Not found
    delete:
      summary: Remove recipe
      description: Remove the specified recipe from the database
      operationId: deleteRecipeById
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
            example: 7
      responses:
        '200':
          description: OK
        '404':
          description: Not found
  /ingredient:
    get:
      summary: Find ingredient(s)
      description: Provide attributes to list ingredients from the database. If no attribute is provided, it returns all.
      operationId: getIngredients
      parameters:
        - name: ingredient_id
          in: query
          required: false
          schema:
            type: integer
            example: 7
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: carrot
        - name: ingredient_type
          in: query
          required: false
          schema:
            type: string
            example: carrot
            enum:
              - meat
              - dairy
              - vegetable
              - fruit
              - bakery
              - nuts
              - beverages
              - fats
      responses:
        '200':
          description: The query hits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '404':
          description: Not found
    post:
      summary: Add new ingredient
      description: Add a new ingredient into the database
      operationId: addIngredient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingredient'
        required: true
      responses:
        '200':
          description: Successful addition
          content:
            text/plain:
              schema:
                type: string
              example: 'Successfully added new ingredient!'
        '400':
          description: Invalid input
  /ingredient/{ingredient_id}:
    get:
      summary: Find ingredient by the ID
      description: THe ID is coming from the database
      operationId: getIngredientById
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
            example: 7
      responses:
        '200':
          description: The query hits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '404':
          description: Not found
    put:
      summary: Update ingredient
      description: Update the ingredient's attributes which belongs to the ID
      operationId: updateIngredientById
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
            example: 7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingredient'
        required: true
      responses:
        '200':
          description: The query hits
          content:
            text/plain:
              schema:
                type: string
              example: 'Successful modification of the ingredient!'
        '400':
          description: Invalid input
        '404':
          description: Not found
    delete:
      summary: Remove ingredient
      description: Remove the specified ingredient from the database
      operationId: deleteIngredientById
      parameters:
        - name: ingredient_id
          in: path
          required: true
          schema:
            type: integer
            example: 7
      responses:
        '200':
          description: OK
        '404':
          description: Not found
components:
  schemas:
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 77
        name:
          type: string
          example: banana
        ingredient_type:
          type: string
          description: The type of the recipe ingredient
          example: meat
          enum:
            - meat
            - dairy
            - vegetable
            - fruit
            - bakery
            - nuts
            - beverages
            - fats
    Recipe:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 7
        title:
          type: string
          example: Shakshuka
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        steps:
          type: string
          example: |-
            1. Cut the veggies into small pieces
            2. Heat the oil
            3. Stir the veggies for 5 mins
            4. Let it rest
        prep_time:
          type: int
          description: Preparation time in minutes.
          example: 40
        cook_time:
          type: int
          description: Cooking (baking) time in minutes.
          example: 30
        meal_type:
          type: string
          example: lunch
          enum:
            - breakfast
            - lunch
            - dinner